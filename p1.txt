var reorderUrl = "{{ route('product.buy', '') }}";
            var table = $('#myOrdersTable').DataTable({
                "ajax": {
                    "headers": {
                        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                    },
                    "url": "{{ route('products.myOrders') }}",
                    "type": "GET",
                    "dataType": 'json',
                },
                "columns": [
                    { "data": "id" },
                    { "data": "productName" },
                    { "data": "productPrice" },
                    { "data": "productDetails" },
                    {
                        "data": "productImage", // Product Image
                        "render": function(data) {
                            return '<img src="{{ asset("storage/") }}/' + data + '" height="50"/>'; // Display the image
                        }
                    },
                    {
                        "data": null,
                        "render": function(data) {
                            return `
                                <a href="${reorderUrl}/${data.id}" class="btn btn-sm btn-secondary reorder-btn" data-id="${data.id}">Buy now</a>
                               
                            `;
                        }
                    }
                ]
            });
public function successfullPayment(Request $request)
{
    if (isset($request->session_id)) {

        $stripe = new \Stripe\StripeClient(config('services.stripe.secret'));
        $response = $stripe->checkout->sessions->retrieve($request->session_id);

        $user_id = $response->metadata->user_id;
        $items = session()->get('items');
        $discount = session()->get('discount');
        $discountRate = 0;

        if ($discount == 'GET20') {
            $discountRate = 20;
        }

        foreach ($items as $item) {
            $product_id = $item['product_id'];
            $quantity = $item['quantity'];
            $price = $item['price'];
            $discountedPrice = $price - ($price * $discountRate / 100);
            $total_amount = $discountedPrice * $quantity;

            $payment = new Payment();
            $payment->user_id = $user_id;
            $payment->product_id = $product_id;
            $payment->quantity = $quantity;
            $payment->amount = $discountedPrice;
            $payment->total_amount = $total_amount;
            $payment->currency = $response->currency;
            $payment->payment_status = $response->status;
            $payment->payment_method = "Stripe";
            $payment->stripe_payment_id = $response->payment_intent;

            $paymentDetails = [
                'user_id' => $payment->user_id,
                'product_id' => $payment->product_id,
                'product_name' => Product::find($payment->product_id)->productName,
                'quantity' => $payment->quantity,
                'amount' => $payment->amount,
                'total_amount' => $payment->total_amount,
                'currency' => $payment->currency,
                'payment_status' => $payment->payment_status,
                'payment_method' => $payment->payment_method,
                'stripe_payment_id' => $payment->stripe_payment_id
            ];

            $payment->payment_details = json_encode($paymentDetails);
            $payment->save();
        }

        $user = User::find($user_id);
        $data = [
            'payments' => Payment::where('user_id', $user_id)->get(),
        ];

        $html = view('payment-bill', $data)->render();

        $mpdf = new \Mpdf\Mpdf();
        $mpdf->WriteHTML($html);

        $pdf = $mpdf->Output('', 'S');

        Mail::to($user->email)->send(new PaymentInvoice($data, $pdf));

        session()->forget('user_id');
        session()->forget('items');
        session()->forget('discount');
        session()->forget('stripe_session_id');

        return redirect()->route('products.myOrders')->with('success', 'Payment is successful and an email has been sent with the invoice');
    } else {
        return redirect()->route('product.cancelledPayment');
    }
}


 $stripe = new \Stripe\StripeClient(config('services.stripe.secret'));

        try {
            $refund = $stripe->refunds->create([
                'payment_intent' => $request->stripe_payment_id,
            ]);

            if ($refund) {
               
                $payment = Payment::where('stripe_payment_id', $request->stripe_payment_id)->first();
                if ($payment) {
                    $payment->payment_status = 'refunded';
                    $payment->save();
                }

                return redirect()->back()->with('success', 'Refund processed successfully.');
            }
        } catch (\Exception $e) {
            return redirect()->back()->with('error', 'Refund failed: ' . $e->getMessage());
        }


public function cartSuccessfulPayment(Request $request)
    {
        if (isset($request->session_id)) {
            $stripe = new \Stripe\StripeClient(config('services.stripe.secret'));
            $response = $stripe->checkout->sessions->retrieve($request->session_id);

            $user_id = $response->metadata->user_id;
            $products = session()->get('products', []);
            //dd($products);
            $disc = session()->get('discount', '');

            $discountRate = 0;
            if ($disc == 'GET20') {
                $discountRate = 20;
            }

            foreach ($products as $item) {
                $product_id = $item['product_id'];
                $quantity = $item['product_quantity'];
                $price = $item['product_price'];
                $discountedPrice = $price - ($price * $discountRate / 100);
                $total_amount = $discountedPrice * $quantity;

                $payment = new Payment();
                $payment->user_id = $user_id;
                $payment->product_id = $product_id;
                $payment->quantity = $quantity;
                $payment->amount = $discountedPrice;
                $payment->total_amount = $total_amount;
                $payment->currency = $response->currency;
                $payment->payment_method = 'stripe';
                $payment->payment_status = $response->status;
                $payment->stripe_payment_id = $response->payment_intent;

                $paymentDetails = [
                    'user_id' => $payment->user_id,
                    'product_id' => $payment->product_id,
                    'product_name' => Product::find($payment->product_id)->name,
                    'quantity' => $payment->quantity,
                    'amount' => $payment->amount,
                    'total_amount' => $payment->total_amount,
                    'currency' => $payment->currency,
                    'payment_method' => $payment->payment_method,
                    'payment_status' => $payment->payment_status,
                    'stripe_payment_id' => $payment->stripe_payment_id,
                ];

                $payment->payment_details = json_encode($paymentDetails);
                $payment->save();

                $payments = Payment::where('user_id', auth()->id())->with('product')->get();

                $html = view('payment-bill', compact('payments'))->render();
    
                
                $mpdf = new Mpdf();
                $mpdf->WriteHTML($html);
    
        
                $pdf = $mpdf->Output('', 'S'); 
    
            
                $user = User::find($payment->user_id); 
                Mail::to($user->email)->send(new PaymentInvoice($payments, $pdf));
    
            }

            return redirect()->route('products.myOrders')->with('success', 'Payment is successful ane email has been sent with the invoice');

            session()->forget(['user_id', 'products', 'discount', 'stripe_session_id']);

            return redirect()->route('products.myOrders')->with('success', 'Payment is successful');
        } else {
            return redirect()->route('product.cancelledPayment')->with('error', 'Payment failed');
        }
    }